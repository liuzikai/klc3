#===------------------------------------------------------------------------===#
#
#                     The KLEE Symbolic Virtual Machine
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
#
#===------------------------------------------------------------------------===#

set(LIT_AUTOGENERATED_WARNING "This file is autogenerated, do not edit!")
set(KLEE_TOOLS_DIR "${CMAKE_BINARY_DIR}/bin")
set(LLVM_TOOLS_DIR "${LLVM_TOOLS_BINARY_DIR}")
# FIXME: Do this to avoid changing the template file that
# is shared by both build systems.
set(LLVMCC "${LLVMCC} -I${CMAKE_SOURCE_DIR}/include")
set(LLVMCXX "${LLVMCXX} -I${CMAKE_SOURCE_DIR}/include")
set(NATIVE_CC "${CMAKE_C_COMPILER} ${CMAKE_C_FLAGS} -I ${CMAKE_SOURCE_DIR}/include")
set(NATIVE_CXX "${CMAKE_CXX_COMPILER} ${CMAKE_CXX_FLAGS} -I ${CMAKE_SOURCE_DIR}/include")
set(TARGET_TRIPLE "${TARGET_TRIPLE}")

# Extend native compiler invocation on macOS to point to the currently selected systems directory
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  execute_process(
          COMMAND xcrun --sdk macosx --show-sdk-path
          OUTPUT_VARIABLE MAC_OS_SDK_PATH
          OUTPUT_STRIP_TRAILING_WHITESPACE)
  set(NATIVE_CC "${NATIVE_CC} -isysroot ${MAC_OS_SDK_PATH}")
  set(NATIVE_CXX "${NATIVE_CXX} -isysroot ${MAC_OS_SDK_PATH}")
endif()

# FIXME: Do this to avoid changing the template file that
# is shared by both build systems.
if (ENABLE_POSIX_RUNTIME)
  if (ENABLE_KLEE_UCLIBC)
    set(ENABLE_POSIX_RUNTIME 1)
  else()
    message(AUTHOR_WARNING
      "Disabling POSIX runtime tests because they depend on klee-uclibc"
      "\nFIXME!")
  set(ENABLE_POSIX_RUNTIME 0)
  endif()
else()
  set(ENABLE_POSIX_RUNTIME 0)
endif()

###############################################################################
# Find LLVM testing tools
###############################################################################
# This has been done by KLEE test CMakeLists.txt

###############################################################################
# Configure lit test suite
###############################################################################

# Find path to libkleeRuntest target for `lit.site.cfg`.
# FIXME: This is not the right way to get the location of the target we have to
# set CMP0026 to old.
# This will likely break if using a multi-configuration generator.
if (POLICY CMP0026)
  # HACK: Allow reading `LOCATION` property.
  cmake_policy(SET CMP0026 OLD)
endif()

configure_file(lit.site.cfg.in
  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
  @ONLY
)

add_custom_target(klc3-systemtests
  COMMAND "${LIT_TOOL}" ${LIT_ARGS} --timeout=10 "${CMAKE_CURRENT_BINARY_DIR}"
  DEPENDS klc3
  COMMENT "Running system tests for klc3"
  ${ADD_CUSTOM_COMMAND_USES_TERMINAL_ARG}
)

# Tell CMake to remove lit's output directories when
# running `make clean`.
file(GLOB_RECURSE
  test_contents
  LIST_DIRECTORIES true
  RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
  "*"
)
set(dirs_to_clean "")
foreach (f ${test_contents})
  if (IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${f}")
    list(APPEND dirs_to_clean "${CMAKE_CURRENT_BINARY_DIR}/${f}/Output")
  endif()
endforeach()
set_property(
  DIRECTORY
  APPEND
  PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
  ${dirs_to_clean}
)
